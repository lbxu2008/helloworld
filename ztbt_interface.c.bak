/******************************************************************************
  文 件 名:  ztbt_interface.c
  功能描述:  ZT8120 WIFI接口API函数实现。
  修改记录:  V1.00.00  Billy  2013/01/20  第一次编写		
  			 V1.01.00  Billy  2013/01/28  修正接入无密码的AP热点时的保存脚本，
  			    		 去掉PSK项。
  			 V1.02.00  liuyuanyuan 2014/12/24 第二次编写
  			 V1.03.00  lyc 2015/06/01 wifi接口移植到8210e平台，添加信号强度读取接口
  Copyright (C), 2001-2008, Shenzhen Zhengtong Electronics Co.LTD
******************************************************************************/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <fcntl.h>
#include <linux/fs.h>
#include <errno.h>
#include <string.h>
#include <dirent.h>
#include <time.h>
#include <termios.h> 
#include <fcntl.h>  
#include <pthread.h>
#include "ztbt_interface.h"

//#define DEBUG 1
#ifdef DEBUG 
	#define debug(format, arg...)   \
		printf("[%s:%d] "format, __FILE__, __LINE__, ##arg)
#else
	#define debug(format, arg...) 
#endif

#define FALSE 1
#define TRUE 0

pthread_t g_maxq_server = 0;
pthread_attr_t attr; 

ZTBTDEV btlist[10];
int g_btdev_index=0;
int g_bt_fd=0;
int g_connect_status=0; //0 disconnect, 1 connect

int speed_arr[] = { 
	B921600, B460800, B230400, B115200, B57600, B38400, B19200, 
	B9600, B4800, B2400, B1200, B300, B38400, B19200, B9600, 
	B4800, B2400, B1200, B300, 
};
int name_arr[] = {
	921600, 460800, 230400, 115200, 57600, 38400,  19200,  
	9600,  4800,  2400,  1200,  300, 38400,  19200,  9600, 
	4800, 2400, 1200,  300, 
};

static void set_speed(int fd, int speed)
{
	int   i;
	int   status;
	struct termios   Opt;
	tcgetattr(fd, &Opt);

	for ( i= 0;  i < sizeof(speed_arr) / sizeof(int);  i++) {
		if  (speed == name_arr[i])	{
			tcflush(fd, TCIOFLUSH);
			cfsetispeed(&Opt, speed_arr[i]);
			cfsetospeed(&Opt, speed_arr[i]);
			status = tcsetattr(fd, TCSANOW, &Opt);
			if  (status != 0)
				perror("tcsetattr fd1");
				return;
		}
		tcflush(fd,TCIOFLUSH);
   }
}
/*
	*@brief   设置串口数据位，停止位和效验位
	*@param  fd     类型  int  打开的串口文件句柄*
	*@param  databits 类型  int 数据位   取值 为 7 或者8*
	*@param  stopbits 类型  int 停止位   取值为 1 或者2*
	*@param  parity  类型  int  效验类型 取值为N,E,O,,S
*/
static int set_Parity(int fd,int databits,int stopbits,int parity)
{
	struct termios options;
	if  ( tcgetattr( fd,&options)  !=  0) {
		perror("SetupSerial 1");
		return(FALSE);
	}
	options.c_cflag &= ~CSIZE ;
	switch (databits) /*设置数据位数*/ {
	case 7:
		options.c_cflag |= CS7;
	break;
	case 8:
		options.c_cflag |= CS8;
	break;
	default:
		fprintf(stderr,"Unsupported data size\n");
		return (FALSE);
	}
	
	switch (parity) {
	case 'n':
	case 'N':
		options.c_cflag &= ~PARENB;   /* Clear parity enable */
		options.c_iflag &= ~INPCK;     /* Enable parity checking */
	break;
	case 'o':
	case 'O':
		options.c_cflag |= (PARODD | PARENB);  /* 设置为奇效验*/
		options.c_iflag |= INPCK;             /* Disnable parity checking */
	break;
	case 'e':
	case 'E':
		options.c_cflag |= PARENB;     /* Enable parity */
		options.c_cflag &= ~PARODD;   /* 转换为偶效验*/ 
		options.c_iflag |= INPCK;       /* Disnable parity checking */
	break;
	case 'S':	
	case 's':  /*as no parity*/
		options.c_cflag &= ~PARENB;
		options.c_cflag &= ~CSTOPB;
	break;
	default:
		fprintf(stderr,"Unsupported parity\n");
		return (FALSE);
	}
 	/* 设置停止位*/  
  	switch (stopbits) {
   	case 1:
    	options.c_cflag &= ~CSTOPB;
  	break;
 	case 2:
  		options.c_cflag |= CSTOPB;
  	break;
 	default:
  		fprintf(stderr,"Unsupported stop bits\n");
  		return (FALSE);
 	}
  	/* Set input parity option */
  	if (parity != 'n')
    	options.c_iflag |= INPCK;
  	options.c_cc[VTIME] = 10; // 1 seconds
    options.c_cc[VMIN] = 0;

	//options.c_lflag &= ~(ECHO | ICANON);
	
	//options.c_lflag = 0x0;
	//options.c_oflag = 0x0;
	//options.c_iflag = 0x0;

  	tcflush(fd,TCIFLUSH); /* Update the options and do it NOW */
  	if (tcsetattr(fd,TCSANOW,&options) != 0) {
    	perror("SetupSerial 3");
  		return (FALSE);
 	}
	return (TRUE);
}


static int OpenDev(char *Dev)
{
	int fd = open( Dev, O_RDWR);         //| O_NOCTTY | O_NDELAY
 	if (-1 == fd) { /*设置数据位数*/
   		perror("Can't Open Serial Port");
   		return -1;
	} else
		return fd;
}


char * ztbt_version(void)
{
	return ZTRET_BT_VERSION;
}

void maxq_recv_thread(void)
{
	int i;
	int flag=0;
	int index=0;
  char readbuf[2048];
  char tempbuf[2048];
  
  struct timeval tv;
  fd_set readset;
  int MaxFd = 0;
  int z = 0;
  
  ZTBTDEV btdev_temp;
  
	memset(readbuf,0x0,sizeof(readbuf));
	memset(tempbuf,0x0,sizeof(tempbuf));
	index=0;
	while(1)
	{
		flag=0;
		FD_ZERO( &readset );
    if( g_bt_fd >= 0 ) FD_SET(g_bt_fd, &readset);
    MaxFd = g_bt_fd + 1;
    tv.tv_sec = 2;
    tv.tv_usec = 0;
    z = select(g_bt_fd, &readset, 0, 0, &tv);
    if(z > 0) 
    {
	    z = read(g_bt_fd,tempbuf,1);
	    if(z>0)
	    {
				if(!g_connect_status)  //未连接状态下的数据处理
				{
					memcpy(&readbuf[index],tempbuf,z);
					index+=z;
				
					if((readbuf[index-1]==0x0a) && (readbuf[index-2]==0x0d))
					{
						if(NULL != strstr(readbuf,"MAC:"))
						{
							flag=1;
							
							btdev_temp.signal = atoi(&readbuf[index-5]);
							memcpy(btdev_temp.macaddr,&readbuf[index-19],12);
							printf("btdev_temp.signal =%d macaddr =%s \n",btdev_temp.signal,btdev_temp.macaddr);
							
							for(i=0;i<g_btdev_index;i++)
							{
								if(NULL != strstr(btdev_temp.macaddr,btlist[i].macaddr))
								{
									break;
								}
								
								if(i==g_btdev_index) //都不一样。
								{
										btlist[g_btdev_index].signal=btdev_temp.signal;
										memcpy(btlist[g_btdev_index].macaddr,btdev_temp.macaddr,12);
										g_btdev_index++;
								}
							}
							
						}
					}
					else if((readbuf[index-1]==0xA3) && (readbuf[index-2]==0x01 )&& (readbuf[index-3]==0x00)&& (readbuf[index-4]==0x02)&& (readbuf[index-5]==0xAA))
					{
						printf("GOT connect:%s\n",readbuf);
						flag=1;

						g_connect_status=1;
					}	
						
					if(flag)
					{
						memset(readbuf,0x0,sizeof(readbuf));
						flag=0;
						index=0;
					}
				}
				else  //连接状态下的数据处理
				{
					
				}
				
	    }
	  }
    else // no data recv any more
    {
			memset(readbuf,0x0,sizeof(readbuf));
			index=0;
			flag=0;
    }
	}
	
}


int ztbt_open()
{
	int ret=0;
	int arg;
	
	g_bt_fd = OpenDev("/dev/ttymxc3");
 	if (g_bt_fd>0)
 	{
 		printf("open success ,set baudrate\n");
    set_speed(g_bt_fd,9600);
 	} 
 	else 
 	{
	  printf("Can't Open Serial Port!\n");
 	}
 	
	if (set_Parity(g_bt_fd,8,1,'N')== FALSE) 
	{
    printf("Set Parity Error\n");
  }

	printf("MAX32555 Driver Verison: %s\n",ZTRET_BT_VERSION);
	{
	  pthread_attr_init(&attr); 
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
		
		ret=pthread_create(&g_maxq_server,&attr,(void *)maxq_recv_thread,(void *)&arg);
		if(ret)
		{
			printf("pthread_create:maxq_recv_thread faild\n");
		}
	}
	return 0;
}

int ztbt_scan(ZTBTDEV * ztbt,int timeout)
{	
	return g_btdev_index;
}

int ztbt_connect(char * mac_addr)
{
	char command[64];
	
	sprintf(command,"AT+C%s\x0d\x0a",mac_addr);
	write(g_bt_fd,command,strlen(command));
	
	return 0;	
}


int ztbt_disconnect(void)
{
	char command[64];
	
	sprintf(command,"AT+RESET\x0d\x0a",mac_addr);
	write(g_bt_fd,command,strlen(command));
	
	return 0;
}

int ztbt_close(void)
{
	close(g_bt_fd);
	return 0;
}

int ztbt_status(void)
{
	return g_connect_status;	
}

int ztbt_send(char * buff,int datalen)
{
	write(g_bt_fd,buff,datalen);
	return 0;	
}

int ztbt_recv(char * buff,int buflen)
{
	return 0;	
}

